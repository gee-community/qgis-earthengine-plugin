{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google Earth Engine Plugin for QGIS","text":"Google Earth Engine Plugin for QGIS <p>         The goal of the plugin is to make it easy for QGIS users to access data from Google Earth Engine.         The plugin allows you to run Earth Engine Python API code in the QGIS Python Console and visualize         the results on the QGIS Canvas. The plugin also provides a set of Processing algorithms with a         no-code user interface to visualize and download data from Earth Engine.       </p>          \u2b50  rating votes          \u2b07\ufe0f  downloads                             Quickstart Guide                <p>                 Get started with the QGIS\u2013Earth Engine plugin in just a few steps. Install it from the QGIS Plugin Manager or GitHub, enable it in QGIS, sign in with your Google Earth Engine account, and start exploring datasets directly in QGIS               </p>                  Installation                <p>                 Step-by-step guide with examples and screenshots to install and set up the plugin quickly. Follow the instructions to configure your QGIS environment.               </p>                    Using Earth Engine in QGIS                <p>                 Learn how to load satellite imagery, access collections, and perform geospatial analysis inside QGIS powered by Google Earth Engine.                     </p>                Tutorials                <p>                 Browse tutorials, practical exercises, and usage examples. You can also contribute by reporting issues, suggesting improvements, or sharing workflows.               </p> Note <p>             This guide does NOT replace the Google Earth Engine online manual. Rather, it helps you understand how it can be integrated with QGIS.  If you would like to contribute to this project, please do not forget to open an issue or pull request.              This version of MkDocs was developed by Antony Barja (geografope) using the Material for MkDocs theme with some R pipeline ."},{"location":"installation/","title":"\u2b07\ufe0f Installation","text":"<p>The Google Earth Engine Plugin for QGIS can be installed by the Plugin Manager from the official QGIS plugin repository. The installation process involves a few extra steps to authenticate with your Google Earth Engine account and set the Google Cloud project. This step-by-step guide will help you install and configure the plugin.</p> <ol> <li> <p>In QGIS, open the Plugin Manager by going to Plugins \u2192 Manage and Install Plugins\u2026</p> <p></p> </li> <li> <p>Select the All tab and search for <code>google earth engine</code>. From the results, select the Google Earth Engine plugin and click on the Install Plugin button to install it.</p> <p></p> </li> <li> <p>Once the installation finishes, the plugin manager will initialize the plugin. First, it will look for a <code>credentials</code> file in your home directory containing the authentication token. This file will exist if you have previously used the plugin or the Google Earth Engine Python API on your computer. If the credentials file is not found, you will be prompted to sign in to your Google Earth Engine account. Click OK to proceed.</p> <p>Note: If you encounter any errors after installing the plugin, refer to the Troubleshooting Guide for help.</p> <p></p> </li> <li> <p>A new tab will open in your web browser and you will be prompted to sign in to your Google account. If you have multiple accounts, make sure to select the one that is linked with Google Earth Engine.</p> <p></p> </li> <li> <p>Review the permissions and click Allow.</p> <p></p> </li> <li> <p>Upon successful completion of the authentication process, the credentials will be saved on your computer. You can close the browser tab now.</p> <p></p> </li> <li> <p>Next, you will be prompted to select the Google Cloud Project you want to use for the plugin. This step is required since many Earth Engine users have access to multiple projects for their account.</p> <p></p> </li> <li> <p>There are many ways to find out the name of the Google Cloud Project associated with your account. For most users of Google Earth Engine, the easiest way will be from the Earth Engine Code Editor. Open the Earth Engine Code Editor in a new web browser tab. Once signed-in, click on the account name in the top-right corner and select Project Info.</p> <p></p> </li> <li> <p>Copy the name of the Cloud Project displayed in the window.</p> <p></p> </li> <li> <p>Back in QGIS, paste the cloud project name in the Select Earth Engine project dialog and click OK.</p> <p></p> </li> <li> <p>The plugin will now be initialized with the selected cloud project.</p> <p></p> </li> <li> <p>Close the Plugin manager window. You will find the newly installed Google Earth Engine plugin in the Plugins menu.</p> <p></p> </li> <li> <p>The plugin also adds several algorithms to the QGIS Processing Toolbox. Open the toolbox from Processing  \u2192 Toolbox and see the available algorithms under Google Earth Engine provider.</p> <p></p> </li> </ol>"},{"location":"quickstart/","title":"\ud83d\ude80 Quickstart Guide","text":""},{"location":"quickstart/#1-install-the-plugin","title":"1\ufe0f\u20e3 Install the Plugin","text":"<ul> <li>Open QGIS Plugin Manager (<code>Plugins \u2192 Manage and Install Plugins</code>).</li> <li>Search for \"Google Earth Engine\" and install it.</li> </ul>"},{"location":"quickstart/#2-authenticate-with-your-google-earth-engine-account","title":"2\ufe0f\u20e3 Authenticate with your Google Earth Engine account","text":"<p>The plugin uses Google Earth Engine API and requires you to sign-in to your Google account. Complete the web-based authentication prompted by the plugin.</p>"},{"location":"quickstart/#3-select-your-google-cloud-project-id","title":"3\ufe0f\u20e3 Select your Google Cloud Project ID","text":"<p>Google Earth Engine requires a Google Cloud Project. To find your Project ID:</p> <ul> <li>Go to the Google Cloud Console.</li> <li>Your Project ID is visible in the URL or can be selected from the resource list.</li> <li>For more details, refer to the official Google Cloud Project Management Guide.</li> </ul> <p>See our Step-by-Step Installtion Guide for detailed installation instructions.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>The main challenge with installing and using the Google Earth Engine Plugin for QGIS is around authentication and selecting the cloud project. This page will help you identify and debug common issues.</p>"},{"location":"troubleshooting/#authentication-error-while-initializing-the-plugin","title":"Authentication error while initializing the plugin","text":"<p>If the plugin fails to initialize after installation or during QGIS startup, you need to re-authenticate using Python Console.</p> <p></p> <p>Open the Python Console from Plugins \u2192 Python Console.</p> <p></p> <p>In the Console, enter the following 2 lines of code. Press Enter after entering each line. This code will re-launch the authentication flow on your web browser.</p> <pre><code>import ee\nee.Authenticate()\n</code></pre> <p></p> <p>Complete the authentication. Once done, go to the Plugin Manager from Plugins \u2192 Manage and Install Plugins\u2026 , select the Installed tab and enable the Google Earth Engine plugin.</p>"},{"location":"troubleshooting/#resetting-authentication","title":"Resetting Authentication","text":"<p>If you continue to experience authentication issues, it is advisable to clear the stored credentials on your computer and re-initialize the plugin.</p> <p>The credentials file is stored in the user home directory. The path to the file depends on on your operating system as indicated below.</p> <ul> <li>Windows: <code>C:\\Users\\&lt;USER&gt;\\.config\\earthengine\\credentials</code></li> <li>Linux: <code>/home/&lt;USER&gt;/.config/earthengine/credentials</code></li> <li>MacOS: <code>/Users/&lt;USER&gt;/.config/earthengine/credentials</code></li> </ul>"},{"location":"troubleshooting/#troubleshooting-common-errors","title":"Troubleshooting Common Errors","text":"Error Solution <code>ModuleNotFoundError: No module named 'ee_plugin'</code> Ensure the plugin is installed via QGIS Plugin Manager. <code>ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED]</code> On macOS, run <code>/Applications/Python 3.x/Install Certificates.command</code>. Plugin crashes after authentication Ensure your IP is not blocked by a firewall. Check code.earthengine.google.com. <code>SRE module mismatch</code> Set <code>PYTHONPATH</code> to plugin extlibs (e.g. <code>export PYTHONPATH=~/Projects/qgis-earthengine-plugin/extlibs</code>)."},{"location":"usage/","title":"\ud83c\udf0d Using Earth Engine in QGIS","text":"<p>With the code and algorithm tools below, the underlying Earth Engine assets are added as a WMS via our own custom QGIS Data Provider. To modify data pulled from Earth Engine, you must export it via the <code>Export</code> tools. The exception is if the <code>retain as vector layer</code> option is selected for the <code>Add Feature Collection</code> algorithm.</p> <p>To export data, you may use the <code>Export Image as GeoTIFF</code> algorithm. For feature collections added with the <code>retain as vector layer</code>, you may also right-click on the layer and use QGIS' built-in export functionality.</p>"},{"location":"usage/#code-usage","title":"Code Usage","text":"<p>You can use Earth Engine datasets programmatically within QGIS using the <code>Python Console</code>:</p> <pre><code>import ee\nfrom ee_plugin import Map\n\nimage = ee.Image('USGS/SRTMGL1_003')\nvis_params = {\n    'min': 0, 'max': 4000,\n    'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']\n}\nMap.addLayer(image, vis_params, 'Digital Elevation Model')\nMap.setCenter(-121.753, 46.855, 9)\n</code></pre>"},{"location":"usage/#algorithms-via-processing-toolbox-and-plugin-menu","title":"Algorithms via Processing Toolbox and Plugin Menu","text":"<p>Earth Engine algorithms are available from:</p> <ul> <li>The Processing Toolbox (<code>Processing &gt; Toolbox &gt; Google Earth Engine</code>)</li> <li>The Plugin Menu (<code>Plugins &gt; Google Earth Engine</code>)</li> </ul> <p>See available algorithms for more details.</p> <p></p>"},{"location":"usage/#model-designer","title":"Model Designer","text":"<p>Earth Engine algorithms can be integrated into QGIS Model Designer workflows:</p> <ul> <li>Open <code>Processing Toolbox &gt; Models &gt; Create New Model</code></li> <li>Add and chain EE algorithms with other QGIS algorithms</li> <li>Save your custom processing model for repeated use</li> </ul> <p>An example model is provided for the hillshade example below: </p>"},{"location":"usage/#saving-your-project","title":"Saving Your Project","text":"<p>Any layers and model workflows can be saved in your QGIS project file.  </p> <p>Be sure to re-authenticate if opening the project on a new machine or after token expiry.</p>"},{"location":"usage/#available-algorithms","title":"\u2699\ufe0f Available Algorithms","text":"<p>The following algorithms are currently implemented in the plugin:</p> Algorithm Name Description Add EE Image Loads a single Earth Engine image for viewing Add Image Collection Loads a filtered Earth Engine image collection for viewing Export GeoTIFF Exports an EE image as a Cloud-Optimized GeoTIFF to disk Add Feature Collection Loads a feature collection from Earth Engine <p>\ud83d\udccc Each algorithm includes in-dialog documentation to help guide usage directly within QGIS.</p>"},{"location":"usage/#map-functions","title":"\ud83d\uddfa\ufe0f Map Functions","text":"<p>The plugin supports several Map API functions similar to the Earth Engine Code Editor:</p> Function Description <code>Map.addLayer(eeObject, visParams, name, shown, opacity)</code> Adds a dataset to QGIS. <code>Map.centerObject(object, zoom)</code> Centers the map on an object. <code>Map.getBounds(asGeoJSON)</code> Returns map bounds. <code>Map.getCenter()</code> Gets the current center of the map. <code>Map.setCenter(lon, lat, zoom)</code> Moves the center of the map. <code>Map.getScale()</code> Returns the current map scale. <code>Map.getZoom()</code> Returns the current zoom level. <code>Map.setZoom(zoom)</code> Sets a new zoom level. <p>For more details, check the Earth Engine API Documentation.</p>"},{"location":"tutorials/","title":"\ud83d\udc68\ud83c\udffc\u200d\ud83d\udcbb Tutorials","text":"<p>Following are a set of community contributed tutorials showing how to use the Google Earth Engine Plugin for QGIS.</p> <ul> <li>Downloading Images from Earth Engine: A tutorial showing how to create a Sentinel-2 median composite for a region and download it as a GeoTIFF file.</li> <li>Building a Workflow: A tutorial on using the QGIS Model Designer to build a workflow to download a data layer of Cocoa Probability from the Earth Engine Data Catalog and calculate the percentage of cocoa plantation in a plot boundary.</li> <li>Visualizing Data from Earth Engine: Use the Earth Engine Python API to load a data layer from CMIP6 Climate Projections dataset and visualize it on a globe.</li> </ul>"},{"location":"tutorials/building_a_workflow/","title":"Building a Workflow","text":""},{"location":"tutorials/building_a_workflow/#overview","title":"Overview","text":"<p>The processing algorithms provided by the Google Earth Engine plugin can be used in the QGIS Model Designer to automate workflows that combine data from the Earth Engine Data Catalog with processing algorithms from QGIS. </p> <p>In this tutorial, we will learn how to use a data layer of Cocoa Probability from Forest Data Partnership to calculate plot-level statistics of cocoa plantations. We will build a workflow to automate the following tasks to calculate the percentage of a farm plot covered with cocoa plantation.</p> <ol> <li>Load the Forest Data Partnership Cocoa Probability model 2025a layer.</li> <li>Download the data for the region of interest.</li> <li>Apply a threshold to select pixels with a high probability of cocoa.</li> <li>Calculate the cocoa and total pixels within the plot.</li> <li>Calculate the percentage of cocoa pixels in the plot.</li> </ol> <p></p> <p>This tutorial is aimed at demonstrating the use of the Google Earth Engine plugin in QGIS Model Designer. For a more comprehensive solution for compliance with deforestation-related regulations using QGIS, please check the Whisp analysis QGIS plugin.</p>"},{"location":"tutorials/building_a_workflow/#datasets","title":"Datasets","text":"<p>Visit the Forest Data Partnership page in the Earth Engine Data Catalog. Select the Cocoa Probability model 2025a dataset. </p> <p></p> <p>Note the Image Collection ID <code>projects/forestdatapartnership/assets/cocoa/model_2025a</code>. We will use this in our model.</p> <p></p> <p>For the plot polygon, we will use a single plot polygon in Ghana supplied as a GeoJSON file <code>plot.geojson</code> (right-click and choose Save Link As...). This plot is one of the test polygons from WHISP.</p>"},{"location":"tutorials/building_a_workflow/#procedure","title":"Procedure","text":"<ol> <li> <p>Open QGIS. From the QGIS Browser Panel, locate the downloaded <code>plot.geojso</code>n file and double-click to open it. This file contains a single polygon for a farm plot in Ghana. We will calculate the percentage of the plot that has cocoa plantations.</p> <p></p> </li> <li> <p>To help us select a region of interest, it will be helpful to have a basemap. From the QGIS Browser Panel, locate the XYZ Tiles \u2192 OpenStreetMap layer and drag it to the canvas.</p> <p></p> </li> <li> <p>Open the Processing Toolbox from Processing \u2192 Toolbox. From the toolbar, select Models \u2192 Create New Model..</p> <p></p> </li> <li> <p>In the Model Designer dialog, enter the model Name as <code>Calculate Cocoa Percentage</code> and click Save model button. When prompted to enter the file name, enter <code>calculate_cocoa_percentage.model3</code>.</p> <p></p> </li> <li> <p>We will now start building the model. The first input to the model will be the layer with the plot polygon. From the Inputs tab, scroll down to find the + Vector Layer input. Drag it to the canvas. In the Vector Layer Parameter Definition dialog, enter <code>Plot Polygons</code> as the Description and select <code>Polygon</code> as the Geometry type. Click OK. </p> <p></p> </li> <li> <p>Next, we will add another input for the user to select the extent of analysis. This is helpful if the input layer contains multiple polygons, but we want to restrict the analysis to a smaller region. Find the + Extent parameter and drag it to the canvas. Enter <code>Analysis Extent</code> as the Description and click OK.</p> <p></p> </li> <li> <p>Once the inputs are configured, let\u2019s start building the workflow. First step is to load the dataset from Earth Engine. Switch to the Algorithms tab. Scroll down to the Google Earth Engine provider and locate the <code>Add Image Collection</code> algorithm. Drag it to the canvas.</p> <p></p> </li> <li> <p>Enter the Earth Engine Image Collection ID for the Cocoa Probability model 2025a dataset <code>projects/forestdatapartnership/assets/cocoa/model_2025a</code>. For the Extent, switch to Model Input and select <code>Analysis Extent</code>. Fill the Start date and End date for filtering as <code>01-01-2023 00:00</code> and <code>01-01-2024 00:00</code>, respectively. The dataset is a single-band image of cocoa probability at each pixel with the range of values from 0 to 1. So enter the following Visualization Parameter (JSON) <code>{'min':0, 'max':1, 'palette': ['brown', 'white', 'green']}</code> which will be used to visualize the layer in a Brown-Green palette. Set the Clip to extent to <code>Yes</code> and click OK.</p> <p></p> </li> <li> <p>The next step is to connect the Export Image to GeoTIFF algorithm. Locate it and drag it to the canvas.</p> <p></p> </li> <li> <p>In the Export Image to GeoTIFF dialog box, for the EE Image Name, switch to Using algorithm output and select <code>\"Layer Name\"from algorithm \"Add Image Collection\"</code>. For Extent, switch to Using model input and select <code>Analysis Extent</code>. The spatial resolution of the dataset is 10m, so enter <code>10</code> as the Scale (meters). Click OK.</p> <p></p> </li> <li> <p>The previous step will download the data for the given extent as a GeoTIFF file. The pixel values of this image will be the probability values from 0 to 1. We can apply a threshold to select pixels with high probability of being cocoa. Search and locate the  GDAL \u2192 Raster miscellaneous \u2192 Raster calculator algorithm. Drag it to the canvas.</p> <p></p> <p>Tip: The GDAL Raster Calculator algorithm is preferred over the native Raster Calculator in the Model Designer since it is easier to configure correctly.</p> </li> <li> <p>In the Raster calculator dialog, change the Description to <code>Probability Thresholding</code>. For Input layer A switch to Using algorithm output and select <code>\"Output File\" from algorithm \"Export Image to GeoTIFF\"</code>. Since this is a one-band image, enter <code>1</code> as the Number of raster band for A. With this configuration, we can now write an expression using the variable A which will refer to the first band of the selected image.</p> <p></p> </li> <li> <p>For the Calculation, enter the expression <code>A &gt; 0.96</code>. According to the model documentation, a threshold of 0.96 has precision and recall of ~87% for cocoa accuracy. The result of the expression will be a binary image. We can mask the 0 value pixels by specifying Set output NoData value as <code>0</code>. Click OK.</p> <p></p> </li> <li> <p>We can now count the number of cocoa pixels within the plot polygons. For the next step, select the Zonal statistics algorithm and drag it to the canvas.</p> <p></p> </li> <li> <p>We will be using the Zonal Statistics algorithm twice, so we can change the name to be more descriptive. Enter <code>Cocoa Count</code> as the Description. For the Input layer, switch to Using model input and select <code>Plot Polygons</code>. For the Raster layer, switch to Using algorithm output and select <code>\"Calculated\" from algorithm \"Probability Thresholding\"</code>. For the Output column prefix, enter <code>cocoa_</code>. We only need the count of pixels, so for Statistics to calculate, select only <code>Count</code>. Click OK.</p> <p></p> </li> <li> <p>Having computed the number of cocoa pixels, we can now fill the masked values and count the total number of pixels. Locate the Fill NoData cells algorithm and drag it to the canvas.</p> <p></p> </li> <li> <p>For the Raster input, switch to Using algorithm output and select <code>\"Calculated\" from algorithm \"Probability Thresholding\"</code>. Enter <code>1</code> as the Fill value.</p> <p></p> </li> <li> <p>We now add one more Zonal Statistics step to calculate the total pixels. Select the Zonal statistics algorithm and drag it to the canvas.</p> <p></p> </li> <li> <p>Change the Description to <code>Total Count</code>. For the Input layer, switch to Using algorithm output and select <code>\"Zonal Statistics\" from algorithm \"Cocoa Count\"</code>. For the Raster layer, switch to Using algorithm output and select <code>\"Output raster\" from algorithm \"Fill NoData cells\"</code>. This time, for the Output column prefix, use <code>total_</code>. Select only <code>Count</code> as the Statistics to calculate.</p> <p></p> </li> <li> <p>The computed layer now has the count of both total and cocoa pixels within each plot. We can use the Field Calculator to calculate and add a new field with the percentage. Search and locate the Field Calculator algorithm and drag it to the canvas.</p> <p></p> </li> <li> <p>Change the Description to <code>Percentage Calculation</code>. For the Input layer, switch to Using algorithm output and select <code>\"Zonal Statistics\" from algorithm \"Total Count\"</code>. Enter <code>percentage_cocoa</code> as the Field name. For the expression enter <code>100*(\"cocoa_count\"/\"total_count\")</code>.</p> <p></p> </li> <li> <p>This being our final result, we will add a layer name that will load the result in QGIS once the model has completed. Enter the name <code>output</code> for Calculated.</p> <p></p> </li> <li> <p>The model is now complete. Click the Run model button.</p> <p></p> </li> <li> <p>In the Calculate Cocoa Percentage dialog, set the Analysis Extent. You can zoom to the region around the plot of interest and select Use Current Map Canvas Extent. Select <code>plot</code> as the layer for Plot Polygons. For the output, browse to a folder on your computer and enter the name <code>plots_with_cocoa_percentage.gpkg</code>. Click Run.</p> <p></p> </li> <li> <p>Once the model run completes, a new layer <code>plots_with_cocoa_percentage</code> will be added to the Layers panel. Open the attribute table and you will see new column with statistics computed from the cocoa probability dataset.</p> <p></p> </li> </ol> <p>The completed model can be downloaded as a model3 file from <code>calculate_cocoa_percentage.model3</code>. To open this model, go to Models \u2192 Open Existing Model\u2026 from the Processing Toolbox bar and browse to the downloaded model3 file.</p>"},{"location":"tutorials/downloading_images/","title":"Downloading Images from Earth Engine","text":""},{"location":"tutorials/downloading_images/#overview","title":"Overview","text":"<p>The Google Earth Engine plugin comes with a handy <code>Export Image to GeoTIFF</code> algorithm that allows you to download images from GEE directly to your computer as GeoTIFF files. In this tutorial, we will use the plugin to create a Sentinel-2 median composite for a region and download it as a GeoTIFF file.</p>"},{"location":"tutorials/downloading_images/#procedure","title":"Procedure","text":"<ol> <li> <p>Open QGIS. To help us select a region of interest, it will be helpful to have a basemap. From the QGIS Browser Panel, locate the XYZ Tiles \u2192 OpenStreetMap layer and drag it to the canvas.</p> <p></p> </li> <li> <p>We can use the QGIS\u2019s built-in geocoder to search for a place. For this tutorial, we want to download imagery over Paris. Select the locator bar in the bottom left corner and enter the search term <code>&gt; paris</code>. Make sure there is a space between the <code>&gt;</code> character and the search term. From the results, click on the first one to zoom to the location.</p> <p></p> </li> <li> <p>Zoom and pan the map to the desired extent. Open the Processing Toolbox from Processing \u2192 Toolbox. Locate the Add Image Collection algorithm from the Google Earth Engine provider. Double-click to open it.</p> <p></p> </li> <li> <p>To add an Image Collection, we first need to find the Image Collection ID for the Sentinel-2 Level-2A collection. </p> <p></p> </li> <li> <p>Open the Earth Engine Data Catalog and navigate to the dataset page for Harmonized Sentinel-2 MSI: MultiSpectral Instrument, Level-2A (SR). Copy the Image Collection ID <code>COPERNICUS/S2_SR_HARMONIZED</code> shown on the page.</p> <p></p> </li> <li> <p>Back in the Add Image Collection dialog, paste the Image Collection ID <code>COPERNICUS/S2_SR_HARMONIZED</code>. Next, we can apply a metadata filter to select images with less cloud. In the Filter by Image Properties section, select <code>CLOUDY_PIXEL_PERCENTAGE</code> as the property, <code>&lt;</code> as the operator and enter <code>30</code> as the value. This will select all images with &lt; 30% cloud cover.</p> <p></p> </li> <li> <p>In the Compositing section, select <code>Median</code> as the Compositing Method. This method will take all available images and calculate the median value for each pixel. For optical imagery, such as Sentinel-2, this method is useful in selecting the best representative pixel for the chosen duration without being affected by outliers such as clouds and cloud-shadow. We want to create an annual composite, so in the Filter by Dates section, enter the Start and End dates as <code>01-01-2024</code> and <code>01-01-2025</code>. </p> <p>Remember that the End date in the Earth Engine date filter is exclusive - so we need to add an extra day to ensure do not exclude the last day of the year.</p> <p></p> </li> <li> <p>Expand the Filter by Extent (Bounds) section. Click the <code>Map Canvas Extent</code> button to load the selected region in the canvas.</p> <p></p> </li> <li> <p>Before loading the image, we need to specify the visualization parameters. For multi-band images, we can select 3 bands to be used for visualization. We will visualize the resulting image in natural color, so select <code>B4</code> (Red) , <code>B3</code> (Green) and <code>B2</code> (Blue) as the bands. The typical range of pixel values for Sentinel-2 images are between 0-3000, so enter <code>0</code> as Min and <code>3000</code> as Max. Check the Clip to Extent box to load only the pixels within the selected extent and click Run.</p> <p></p> </li> <li> <p>Once the algorithm finishes, a new layer <code>IC: COPERNICUS/S2_SR_HARMONIZED (Median)</code> will be added to the Layers panel. This layer is being streamed from the Earth Engine servers. As you zoom or pan the image - new pixels will be computed on-the-fly and displayed. Let\u2019s download this image so we can use it within QGIS for analysis. Locate the <code>Export \u2192 Export Image to GeoTIFF</code> algorithm from the Google Earth Engine provider in the Processing Toolbox. Double-click to open it.</p> <p></p> </li> <li> <p>In the Export Image to GeoTIFF dialog, select <code>IC: COPERNICUS/S2_SR_HARMONIZED (Median)</code> as the EE Image. We want to export this at its native resolution, so enter <code>10</code> as the Scale (meters). We can also specify the projection in which we want the output image. Click the Select CRS button.</p> <p></p> </li> <li> <p>It is recommended to use a Projected CRS suitable for the region of interest. UTM is a good choice for such a CRS. We can find the CRS for the UTM Zone where our region is located. If you do not know the UTM Zone, you can use this handy What UTM Zone am I in? map. Paris is located in the UTM Zone 31N. Search and select the <code>WGS84 / UTM zone 31N (EPSG:32631)</code> CRS. Once selected, click the arrow at the top of the selector to go back to the previous dialog.</p> <p></p> </li> <li> <p>Next, select the Map Canvas Extent as the Extent of the image for Export. We can choose the subset and order of bands to export. For this tutorial, let\u2019s export the B4, B3 and B2 bands. You can select each band from the left-hand section and use the &gt;&gt; button to add them to the list of output bands.</p> <p></p> </li> <li> <p>For the Output File, browse to a directory on your computer and enter the file name as <code>s2_median_composite.tif</code>. Once configured, click Run.</p> <p></p> </li> <li> <p>The requested region will be divided into smaller tiles and each tile will be downloaded separately. The algorithm will then merge the downloaded tiles into a single mosaic and save it at the requested location. Depending on the size of the region, resolution, number of bands, and your internet bandwidth, this process can take some time. Once the algorithm finishes, click Close.</p> <p></p> </li> <li> <p>In the layer panel, turn off the <code>IC: COPERNICUS/S2_SR_HARMONIZED (Median)</code> layer as it is no longer required. In the Browser panel, locate the directory where you saved the output file. Drag and drop the <code>s2_median_composite.tif</code> file to the canvas to see the downloaded image.</p> <p></p> </li> </ol>"},{"location":"tutorials/visualizing_data/","title":"Visualizing Data from Earth Engine","text":""},{"location":"tutorials/visualizing_data/#overview","title":"Overview","text":"<p>The Google Earth Engine plugin allows you to access Earth Engine datasets programmatically within QGIS using the Python Console. You can filter and pre-process the datasets using the Earth Engine Python API and then visualize the results as a WMS layer in QGIS. This enables you to quickly iterate and create visualizations without exporting large amounts of data from Earth Engine.</p> <p>In this tutorial, we will use the NEX-GDDP-CMIP6: NASA Earth Exchange Global Daily Downscaled Climate Projections dataset and use the GEE Python API to create a Map layer of mean maximum daily temperature for a chosen year under a chosen model and scenario. We will then load and visualize this layer in QGIS on a globe.</p> <p></p>"},{"location":"tutorials/visualizing_data/#procedure","title":"Procedure","text":"<ol> <li>Open the QGIS Python Consolve from Plugins \u2192 Python Console.</li> </ol> <ol> <li>The Python Console allows you to write, edit and run Python scripts in QGIS. Click the Show Editor button to open the Editor panel.</li> </ol> <ol> <li>Once the Google Earth Engine plugin has been installed, you are able to access the EE Python API by importing the <code>ee</code> module in the Python Console. The plugin also adds functions from the <code>Map</code> module to load EE data layers in QGIS canvas. Copy/paste the following block of code in the editor and click the Run Script button. If the script runs without any errors - it means the plugin has been installed and configured correctly. If you get any errors, follow the Installation Guide to install and configure the Google Earth Engine plugin.</li> </ol> <p><pre><code>import ee\nfrom ee_plugin import Map\n</code></pre> 4. We can now write code to access the <code>NASA/GDDP-CMIP6</code> ImageCollection, apply a filter to select the images for the chosen band, year, model and scenario, convert the units from Kelvin to Celcius and calculate the mean annual values. All of this processing is done on the Earth Engine servers. Once we are ready to visualize the results, we use the <code>Map.addLayer()</code> function to add the results to QGIS. Copy/paste the code below into your Python Console Code Editor and click Run Script. A new layer <code>tasmax_2030_ACCESS-CM2_ssp245</code> will be added to the Layers panel. This is a WMS layer that is streaming tiles from the Earth Engine servers. </p> <p></p> <pre><code>import ee\nfrom ee_plugin import Map\n\n# Use the CMIP6 Climate Projections Dataset\ncmip6 = ee.ImageCollection('NASA/GDDP-CMIP6')\n\n# Select a model and a scenario\n\nmodel = 'ACCESS-CM2'\nscenario = 'ssp245'\n\n# Select the band\n# Here we are using maximum air temperature\nband = 'tasmax'\n\n# Select the year\nyear = 2030\nstartDate = ee.Date.fromYMD(year, 1, 1)\nendDate = startDate.advance(1, 'year')\n\nfiltered = cmip6 \\\n.filter(ee.Filter.date(startDate, endDate)) \\\n.filter(ee.Filter.eq('model', model)) \\\n.filter(ee.Filter.eq('scenario', scenario)) \\\n.select(band)\n\n# Temperature values are in Kelvin\n# convert to Celcius\n\ndef scaleValues(image):\n    return image \\\n        .subtract(273.15) \\\n        .copyProperties(image,\n        ['system:time_start', 'model', 'scenario'])\n\nscaled = filtered.map(scaleValues)\n\n# Calculate average daily maximum temperature\nmean = scaled.mean()\n\ntempVis = {\n'min': 10,\n'max': 40,\n'palette': ['blue', 'purple', 'cyan', 'green', 'yellow', 'red'],\n}\n\nlayer_name = f'{band}_{year}_{model}_{scenario}'\nMap.addLayer(mean, tempVis, layer_name)\n</code></pre> <ol> <li>A global layer like this is best visualized on a globe. We will use another QGIS plugin named Globe Builder to create a custom orthographic projection for rendering this layer. You can close the Python Console and go to Plugins \u2192 Manage and Install Plugins, switch to the All tab and search for the Globe Builder plugin. Click Install Plugin.</li> </ol> <p></p> <ol> <li>Once the plugin is installed, launch it from Plugins \u2192 Globe Builder \u2192 Build Globe view. </li> </ol> <p></p> <ol> <li>In the Globe Builder panel, you have an option to opverlay various global data layers and/or graticule layers. For this tutorial, we don't need them, so uncheck all the data sources. Select <code>Azimuthal Orthographic</code> as the Projection.</li> </ol> <p></p> <ol> <li>Scroll down and in the Center the Globe based on: section, choose the Coordinates option. Enter coordinates <code>0, 30</code>. This will create a cutom orthographic projection centered at these coordinates.</li> </ol> <p></p> <ol> <li>Lastly, under the Visualization section, choose <code>White</code> as the Background color. Once done, click the Add the Globe to a Map button.</li> </ol> <p></p> <ol> <li>The plugin will set the Project CRS to a custom projection based on your configuration. The Earth Engine layer will request new tiles from the server in this projection and they will be rendered as a globe.</li> </ol> <p></p>"}]}